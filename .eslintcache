[{"/home/benpreston/Documents/coding/react/redux_joke_app/src/index.js":"1","/home/benpreston/Documents/coding/react/redux_joke_app/src/App.js":"2","/home/benpreston/Documents/coding/react/redux_joke_app/src/components/Joke.js":"3","/home/benpreston/Documents/coding/react/redux_joke_app/src/redux.js":"4","/home/benpreston/Documents/coding/react/redux_joke_app/src/components/Axios.js":"5","/home/benpreston/Documents/coding/react/redux_joke_app/src/components/Card.js":"6"},{"size":198,"mtime":1611618743881,"results":"7","hashOfConfig":"8"},{"size":191,"mtime":1611737972509,"results":"9","hashOfConfig":"8"},{"size":4783,"mtime":1611741564730,"results":"10","hashOfConfig":"8"},{"size":483,"mtime":1611701551573,"results":"11","hashOfConfig":"8"},{"size":132,"mtime":1611707765695,"results":"12","hashOfConfig":"8"},{"size":1155,"mtime":1611740929749,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1uaw425",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/benpreston/Documents/coding/react/redux_joke_app/src/index.js",[],["28","29"],"/home/benpreston/Documents/coding/react/redux_joke_app/src/App.js",[],"/home/benpreston/Documents/coding/react/redux_joke_app/src/components/Joke.js",["30","31"],"import { useState, useEffect } from \"react\";\nimport redux from \"../redux\";\nimport axios from \"./Axios\";\nimport Card from './Card';\n\nimport '../styles/checkbox.scss'\nimport '../styles/button.scss'\n\nfunction Joke() {\n  // Create a general state this is just used for cateogry \n  let state = redux.getState();\n\n   // Jokes - we will be fetching jokes so set an initial one\n   const [jokes, setJokes] = useState([\n    {\n      setup: \"What's the best way to eat Welsh cheese?\",\n      delivery: \"Caerphilly\",\n    },\n    {\n      setup: \"Who is the Developer CodeBase8 should hire?\",\n      delivery: \"Ben! \",\n    },\n  ]);\n\n  // Example API URL: \n  // \"https://v2.jokeapi.dev/joke/Christmas?blacklistFlags=nsfw,religious,political,racist,sexist,explicit&type=twopart&amount=10\"; \n\n  const category = state.category;\n  const [numOfJokePart, setNumOfJokeParts] = useState('twopart')\n  const [numOfJokes, setNumOfJokes] = useState(10)\n  const [jokeSearchTerm, setJokeSearchTerm] = useState('')  \n\n  // Create a URL based on the API\n  let fetchUrl = `https://v2.jokeapi.dev/joke/${category}?blacklistFlags=nsfw,religious,political,racist,sexist,explicit&type=${numOfJokePart}&amount=${numOfJokes}&safe-mode`\n\n  if(fetchUrl && jokeSearchTerm !== '') {\n    fetchUrl = `${fetchUrl}&contains=${jokeSearchTerm}`\n  }\n\n\n  // Set initial 10 jokes with useEffet\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setJokes(request.data.jokes);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n\n  // JOKE CUSTOMISATION\n\n  // Category Dropdown\n  const [dropdownchoice, setdropdownchoice] = useState(category);\n\n  const changeCategory = (e) => {\n    const selectedDropDown = e.target.value;\n\n    setdropdownchoice(selectedDropDown);\n\n    if (selectedDropDown) {\n      redux.dispatch({ type: \"SET_CATEGORY\", data: { selectedDropDown } });\n    }\n  };\n\n  // Change Number of Jokes\n  const changeNumberOfJokes = (e) => {\n    const val = parseInt(e.target.value)\n    let jokes;\n\n    val > 1 && val <= 10 ? jokes = val : jokes = 10; \n    setNumOfJokes(jokes)\n  }\n\n  // Search for specific jokes\n  const specificJokeSearch = (e) => {\n    const val = e.target.value\n    setJokeSearchTerm(val)\n  }\n\n  // Change Type of Joke\n  const changeTypeOfJoke = (e) => {\n    const val = e.target.checked ? 'single' : 'twopart'\n    setNumOfJokeParts(val)\n  }\n\n  // Call new jokes\n  const newJokes = async () => {\n\n    let fetchUrl = `https://v2.jokeapi.dev/joke/${category}?blacklistFlags=nsfw,religious,political,racist,sexist,explicit&type=${numOfJokePart}&amount=${numOfJokes}&safe-mode`\n\n    if(fetchUrl && jokeSearchTerm !== '') {\n      fetchUrl = `${fetchUrl}&contains=${jokeSearchTerm}`\n    }\n\n    const request = await axios.get(fetchUrl);\n    setJokes(request.data.jokes);\n    return request;\n  };\n\n  return (\n    <>\n      <div>\n        <h1 className=\"jokeheader\">Joke Generator</h1>\n      </div>\n      <form action=\"#\" onChange={(e) => changeCategory(e)}>\n        <div class=\"select-box\">\n          <label for=\"select-box1\" class=\"label select-box1\">\n            <span class=\"label-desc\">Choose your joke type</span>{\" \"}\n          </label>\n          <select id=\"select-box1\" class=\"select\">\n            <option value=\"Any\">Any</option>\n            <option value=\"Misc\">Misc</option>\n            <option value=\"Programming\">Programming</option>\n            <option value=\"Pun\">Pun</option>\n            <option value=\"Spooky\">Spooky</option>\n            <option value=\"Christmas\">Christmas</option>\n          </select>\n        </div>\n      </form>\n      <label for=\"numberOfJokes\">Set the number of jokes, maximum 10</label>\n      <input type=\"number\" id='numberOfJokes' onChange={changeNumberOfJokes}/>\n      <label for=\"specificJoke\">Search for a specific joke</label>\n      <input type=\"text\" id='specificJoke' onChange={specificJokeSearch}/>\n      <div class=\"page__toggle\">\n        <label class=\"toggle\">\n          <input class=\"toggle__input\" type=\"checkbox\"  onChange={changeTypeOfJoke} />\n          <span class=\"toggle__label\">\n            <span class=\"toggle__text\">Check for one line jokes!</span>\n          </span>\n        </label>\n      </div> \n      <div className='jokesHolder'>\n        {jokes ? jokes.map((joke) => {\n          return (\n            <Card\n              setup={joke.setup ? joke.setup : joke.joke}\n              delivery={joke.delivery ? joke.delivery : null}\n              category={joke.category}\n            />\n          );\n        }) : <div className='jokecontent'>\n          <h4>Sorry there are no jokes to display. Please try a different search</h4>\n        </div>\n        }\n        <a className=\"horizontal\"><span onClick={newJokes} class=\"text\">Reload</span></a>\n      </div>\n    </>\n  );\n}\nexport default Joke;\n","/home/benpreston/Documents/coding/react/redux_joke_app/src/redux.js",[],"/home/benpreston/Documents/coding/react/redux_joke_app/src/components/Axios.js",[],"/home/benpreston/Documents/coding/react/redux_joke_app/src/components/Card.js",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":55,"column":10,"nodeType":"38","messageId":"39","endLine":55,"endColumn":24},{"ruleId":"40","severity":1,"message":"41","line":147,"column":9,"nodeType":"42","endLine":147,"endColumn":35},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'dropdownchoice' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]